{"version":3,"sources":["history.js","components/Home.js","components/QuestionContent.js","components/Buttons.js","components/Question.js","components/Score.js","components/WrongAnswerVariants.js","components/WrongAnswers.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","Home","className","to","QuestionContent","text","imagine","length","src","alt","Buttons","variante","raspunde","useState","raspuns","setRaspuns","setSelected","index","find","rasp","useEffect","map","varianta","onClick","filter","raspunsCurent","key","Question","setText","setImagine","setVariante","raspunsuri","setRaspunsuri","jucator","setJucator","raspunsuriGresite","setRaspunsuriGresite","setIndex","result","setResult","success","setSuccessMsg","error","setErrorMsg","history","useHistory","changeQuestion","intrebari","push","pathname","state","sort","arr1","arr2","i","compareArray","setTimeout","Score","location","useLocation","raspunsuriCorecte","setRaspunsuriCorecte","countRightAnswers","setWrongIndex","res","raspunsuriIndex","indexes","WrongAnswerVariants","raspGresite","setRaspGresite","setGresit","undefined","setStyle","ras","WrongAnswers","raspunsuriLocation","setRaspunsuriLocation","translateIndex","indexL","Fragment","App","exact","path","component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.749560fc.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n \r\nconst Home = () => {\r\n    return ( \r\n        <div className=\"container\">\r\n            <div className=\"half-top\">\r\n                <h2>Bine ai venit la pregatirea pentru exmenul TS2</h2>\r\n                <p>Pentru a incepe testul apasa butonul de mai jos</p>\r\n            </div>\r\n            <div className=\"half-bottom\">\r\n                <Link to=\"/quizz\" className=\"button-start\">Start</Link>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Home;","import React from 'react';\r\n\r\nconst QuestionContent = ({text, imagine}) => {\r\n    return ( \r\n        <div className=\"question\">\r\n            <h3>{text}</h3>\r\n            {imagine.length ? (\r\n                <img src={imagine} alt=\"question\" />\r\n            ) :(\"\")}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default QuestionContent;","import React,{useState, useEffect} from 'react';\r\n\r\nconst Buttons = ({variante, raspunde}) => {\r\n    const [raspuns, setRaspuns] = useState([]);\r\n\r\n    const raspunsCurent = (index) => {\r\n        if(raspuns.find(rasp => rasp === index)) {\r\n            setRaspuns(raspuns.filter(rasp => rasp !== index));\r\n            return;\r\n        }\r\n        setRaspuns([...raspuns, index]);\r\n    }\r\n\r\n    const setSelected = (index) => {\r\n        if(raspuns.find(rasp => rasp === index)) return true;\r\n        return false;\r\n    }\r\n\r\n    // useEffect(()=>{\r\n    //     console.log(raspuns);\r\n    // },[raspuns]);\r\n\r\n    useEffect(()=>{\r\n        setRaspuns([]);\r\n    },[variante]);\r\n\r\n    return ( \r\n        <div className=\"buttons-container\">\r\n            {variante.length ? \r\n            variante.map((varianta, index) => {\r\n                return(\r\n                <button className={setSelected(index+1) ? \"selectat\" : \"neselectat\"} onClick={() =>raspunsCurent(index+1)} key={index}>{varianta}</button>\r\n                )\r\n            }):\"\"}\r\n            <button className=\"button-continue\" onClick={() => raspunde(raspuns)}>Trimite</button>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Buttons;","import React,{useState, useEffect} from 'react';\r\nimport {intrebari} from '../store/intrebari.json';\r\nimport QuestionContent from './QuestionContent';\r\nimport Buttons from './Buttons';\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Question = () => {\r\n    const [text, setText] = useState('');\r\n    const [imagine, setImagine] = useState('');\r\n    const [variante, setVariante] = useState([]);\r\n    const [raspunsuri, setRaspunsuri] = useState([]);\r\n    const [jucator, setJucator] = useState([]);\r\n    const [raspunsuriGresite, setRaspunsuriGresite] = useState([]);\r\n    const [index, setIndex] = useState(0);\r\n    const [result, setResult] = useState(false);\r\n    const [success, setSuccessMsg] = useState(false);\r\n    const [error, setErrorMsg] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const changeQuestion = () => {\r\n        if(intrebari[index]){\r\n            setText(intrebari[index].text);\r\n            setImagine(intrebari[index].imagine);\r\n            setVariante(intrebari[index].variante);\r\n            setRaspunsuri(intrebari[index].raspunsuri);\r\n            setIndex(index+1);\r\n            return;\r\n        }\r\n        setResult(true);\r\n    }\r\n\r\n    const compareArray = (arr1, arr2) => {\r\n        if(arr1.length !== arr2.length) return false;\r\n        for(let i = 0; i < arr1.length; i++) {\r\n            if(arr1[i] !== arr2[i]) return false\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const afisSuccess = () => {\r\n        setSuccessMsg(true);\r\n        setTimeout(() => {\r\n            setSuccessMsg(false);\r\n        },2000);\r\n    }\r\n\r\n    const afisError = () => {\r\n        setErrorMsg(true);\r\n        setTimeout(() => {\r\n            setErrorMsg(false);\r\n        },2000);\r\n    }\r\n\r\n    const raspunde = (raspuns) => {\r\n        const rasp = raspuns.sort();\r\n        if(compareArray(raspunsuri, rasp)) {\r\n            setJucator([...jucator, 1]);\r\n            setRaspunsuriGresite([...raspunsuriGresite, 0]);\r\n            afisSuccess();\r\n        } else {\r\n            setJucator([...jucator, 0]);\r\n            setRaspunsuriGresite([...raspunsuriGresite, rasp]);\r\n            afisError();\r\n        }\r\n        setTimeout(() => {\r\n            changeQuestion();\r\n        },2000);\r\n    }\r\n\r\n    useEffect(changeQuestion,[]);\r\n\r\n    useEffect(() => {\r\n        if(result){\r\n            history.push({\r\n                pathname: '/score',\r\n                state: { jucator, raspunsuriGresite }\r\n            });\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [result])\r\n\r\n    return ( \r\n        <div className=\"container\">\r\n            <div className=\"half-top\">\r\n                <div className=\"counter\">{index}/{intrebari.length}</div>\r\n                {success ? (<div className=\"success-message\">\r\n                    Raspuns corect\r\n                </div>):(\"\")}\r\n                {error ? (<div className=\"error-message\">\r\n                    Raspuns gresit\r\n                </div>):(\"\")}\r\n                <QuestionContent text={text} imagine={imagine} />               \r\n            </div>\r\n            <div className=\"half-bottom\">\r\n               <Buttons variante={variante} raspunde={raspunde}/>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Question;","import React, {useEffect, useState} from 'react';\r\nimport {useLocation, Link} from \"react-router-dom\";\r\n\r\nconst Score = () => {\r\n\r\n    const location = useLocation();\r\n    const [raspunsuriCorecte, setRaspunsuriCorecte] = useState(0);\r\n    const [raspunsuriGresite, setRaspunsuriGresite] = useState(0);\r\n    const [raspunsuri, setRaspunsuri] = useState([]);\r\n\r\n    useEffect(() => {\r\n        countRightAnswers(location.state.jucator);\r\n        setWrongIndex(location.state.raspunsuriGresite);\r\n       // eslint-disable-next-line\r\n    }, [location]);\r\n\r\n    const countRightAnswers = (raspunsuri) => {\r\n        setRaspunsuriCorecte(raspunsuri.filter(res=> res !== 0).length);\r\n        setRaspunsuriGresite (raspunsuri.length - raspunsuriCorecte);\r\n    }\r\n\r\n    const setWrongIndex = (raspunsuriIndex) => {\r\n        let indexes = [];\r\n        for (let i = 0; i < raspunsuriIndex.length; i++) {\r\n            if(raspunsuriIndex[i] !== 0) {\r\n                indexes.push({index:i, raspuns:raspunsuriIndex[i]});\r\n            }\r\n        }\r\n        setRaspunsuri(indexes);\r\n    }\r\n\r\n    return ( \r\n        <div className=\"container\">\r\n            <div className=\"half-top\">\r\n                <p>Ai raspuns corect la {raspunsuriCorecte} intrebari din {location.state.raspunsuriGresite.length}</p>\r\n            </div>\r\n            <div className=\"half-bottom\">\r\n                {raspunsuriGresite ? (<Link className=\"button-start\"  to={{ pathname: '/wrong', raspunsuri: raspunsuri }} >Vezi raspunsuri gresite</Link>):(\"\")}\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Score;","import React,{useState, useEffect} from 'react';\r\n\r\nconst WrongAnswerVariants = ({variante, raspunsuri, raspunsuriGresite}) => {\r\n    const [raspuns, setRaspuns] = useState([]);\r\n    const [raspGresite, setRaspGresite] = useState({});\r\n\r\n    const setSelected = (index) => {\r\n        if(raspuns.find(rasp => rasp === index)) return true;\r\n        return false;\r\n    }\r\n\r\n    const setGresit = (index) => {\r\n        if(raspGresite === undefined) return false;\r\n        if(raspGresite.raspuns !== undefined) {\r\n            if(raspGresite.raspuns.find(rasp => rasp === index)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const setStyle = (index) => {\r\n        if(setGresit(index) && setSelected(index)) return \"raspunsPartial\"\r\n        if(setSelected(index)) return \"raspunsCorect\"\r\n        if(setGresit(index)) return \"raspunsGresit\"\r\n        return \"neselectatGresit\"\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setRaspuns(raspunsuri);\r\n        setRaspGresite(raspunsuriGresite)\r\n        // eslint-disable-next-line\r\n    },[variante]);\r\n\r\n    return ( \r\n        <div className=\"buttons-container\">\r\n            {variante.length ? \r\n            variante.map((varianta, index) => {\r\n                return(\r\n                <div className={setStyle(index+1)} key={index}>{varianta}</div>\r\n                )\r\n            }):\"\"}\r\n            { raspuns.length && raspGresite !== undefined ?\r\n            (<div>\r\n                <p>Raspunsuri corecte: {raspuns.map(ras=> {\r\n                    return(`${ras}, `)\r\n                })}</p>\r\n                <p>Tu ai raspuns: {raspGresite.raspuns.map(ras=> {\r\n                    return(`${ras}, `)\r\n                })}</p>\r\n            </div>) : null\r\n            }\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default WrongAnswerVariants;","import React,{useState, useEffect} from 'react';\r\nimport {intrebari} from '../store/intrebari.json';\r\nimport QuestionContent from './QuestionContent';\r\nimport WrongAnswerVariants from './WrongAnswerVariants';\r\nimport {useLocation, Link} from \"react-router-dom\";\r\n\r\nconst WrongAnswers = () => {\r\n    const location = useLocation();\r\n    const [text, setText] = useState('');\r\n    const [imagine, setImagine] = useState('');\r\n    const [variante, setVariante] = useState([]);\r\n    const [raspunsuri, setRaspunsuri] = useState([]);\r\n    const [raspunsuriGresite, setRaspunsuriGresite] = useState([]);\r\n    const [index, setIndex] = useState(0);\r\n    const [raspunsuriLocation, setRaspunsuriLocation] = useState([]);\r\n\r\n    const changeQuestion = (index) => {\r\n        if(intrebari[index]){\r\n            setText(intrebari[index].text);\r\n            setImagine(intrebari[index].imagine);\r\n            setVariante(intrebari[index].variante);\r\n            setRaspunsuri(intrebari[index].raspunsuri);\r\n            return;\r\n        }\r\n    }\r\n\r\n    const translateIndex = (index) => {\r\n        if(raspunsuriLocation === undefined) return;\r\n        const indexL = raspunsuriLocation[index];\r\n        if(indexL){\r\n            setIndex(index);\r\n            setRaspunsuriGresite(indexL);\r\n            changeQuestion(indexL.index);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n    setRaspunsuriLocation(location.raspunsuri);\r\n       // eslint-disable-next-line\r\n    }, [location]);\r\n\r\n    useEffect(()=>translateIndex(0)\r\n    // eslint-disable-next-line\r\n    ,[raspunsuriLocation]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n        {raspunsuriLocation ? (\r\n        <div className=\"container\">\r\n            <div className=\"half-top\">\r\n            <div className=\"counter\">Intrebarea {raspunsuriLocation[index] ? raspunsuriLocation[index].index+1 : \"\"}</div>\r\n                <QuestionContent text={text} imagine={imagine} />               \r\n            </div>\r\n            <div className=\"half-bottom\">\r\n                {raspunsuriGresite ? \r\n               (<WrongAnswerVariants variante={variante} raspunsuri={raspunsuri} raspunsuriGresite={raspunsuriGresite}/>)\r\n               : null}\r\n            </div>\r\n            <div className=\"butoane-navigare\">\r\n                <button onClick={() => translateIndex(index-1)}>Anterior</button>\r\n                <Link to=\"/\"  className=\"button-back-home\">Prima pagina</Link>\r\n                <button onClick={() => translateIndex(index+1)}>Urmator</button>\r\n            </div>\r\n            \r\n        </div>)\r\n        : \r\n        (<Link to=\"/\"  className=\"button-continue\">Prima pagina</Link>)}\r\n        </React.Fragment>\r\n     );\r\n}\r\n \r\nexport default WrongAnswers;","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from './components/Home';\nimport Question from './components/Question';\nimport Score from './components/Score';\nimport WrongAnswers from './components/WrongAnswers';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/quizz\" component={Question} />\n        <Route path=\"/score\" component={Score} />\n        <Route path=\"/wrong\" component={WrongAnswers} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport history from \"./history\";\nimport { Router } from \"react-router-dom\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}